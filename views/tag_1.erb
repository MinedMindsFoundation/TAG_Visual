<!doctype html>
<meta charset="utf-8">
<html>
<style>
    .bar {
        fill: darkgreen;
    }
    
    #tooltip {
        position: absolute;
        text-align: left;
        width: 175px;
        height: 120px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }

     div.tooltip {
        position: absolute;
        text-align: left;
        width: 175px;
        height: 120px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
    
    .arc text {
        font: 10px sans-serif;
        text-anchor: middle;
    }
    
    .arc path {
        stroke: #fff;
    }
</style>



<head>

    <h1> </h1>
</head>

<body>
    <svg id="scatter" width="700" height="500"> </svg>
    <svg id="pieChart" width="960" height="500"></svg>

    
    <script src="http://d3js.org/d3.v4.min.js"></script>
    <script>
        // Create data
        d3.csv("csv/r_X_csv.csv", function(error, data) {
            // console.log("data", data)
            var unitSoldArray = [];
            var savingsArray = [];
            var productDetails = {};
            var currentNetCostByProduct = [];
            data.forEach(function(d) {
                if (d.generic_name != "") {
                    productDetails["id"] = (d.id);
                    productDetails["generic_name"] = (d.generic_name);
                    productDetails["unitSold"] = (d.rolling_yearly_usage);
                    unitSoldArray.push(parseFloat(d.rolling_yearly_usage));
                    // currentNetCostByProduct.push(productDetails);
                };
                if (d.priority == "CURRENT #1") {
                    productDetails["current_manufacturer"] = (d.manufacturer_code);
                    productDetails["currentNuberOneNetCost"] = (d.net_cost);
                    productDetails["currrentNumberOneSavings"] = (0);
                    productDetails["currentNumberOnePriority"] = (d.priority);
                };
                if (d.priority == 1) {
                    productDetails["numOneManufacturer"] = (d.manufacturer_code);
                    productDetails["numberOneNetCost"] = (d.net_cost);
                    productDetails["numberOneSavings"] = (d.saving);
                    productDetails["numberOnePriority"] = (d.priority);
                    currentNetCostByProduct.push(productDetails);
                    savingsArray.push(parseFloat(d.saving));
                    productDetails = {};
                };
            });
            var data = currentNetCostByProduct;
            console.log(data)
            var tooltip = d3.select('body').append('div')
                .attr('id', 'tooltip')
                .style('opacity', 0);

            var margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 30
            };
            width = 900 - margin.left - margin.right,
                height = 480 - margin.top - margin.bottom;

            var x = d3.scaleLinear()
                .range([0, width])
                .nice();
            var y = d3.scaleLinear()
                .range([height, 0]);
            var xAxis = d3.axisBottom(x).ticks(12),
                yAxis = d3.axisLeft(y).ticks(12 * height / width);
            var brush = d3.brush().extent([
                    [0, 0],
                    [width, height]
                ]).on("end", brushended),
                idleTimeout,
                idleDelay = 350;
            var svg = d3.select("#scatter").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            var clip = svg.append("defs").append("svg:clipPath")
                .attr("id", "clip")
                .append("svg:rect")
                .attr("width", width)
                .attr("height", height)
                .attr("x", 0)
                .attr("y", 0);
            var xExtent = d3.extent(savingsArray, function(d) {
                return d;
            });
            var yExtent = d3.extent(unitSoldArray, function(d) {
                return d;
            });
            x.domain(d3.extent(savingsArray, function(d) {
                return d;
            })).nice();
            y.domain(d3.extent(unitSoldArray, function(d) {
                return d;
            })).nice();
            var scatter = svg.append("g")
                .attr("id", "scatterplot")
                .attr("clip-path", "url(#clip)");
            scatter.append("g")
                .attr("class", "brush")
                .call(brush);

            scatter.selectAll(".dot")
                .data(data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 4)
                .attr("cx", function(d) {
                    console.log("x d", d);
                    console.log("xD", x(d.numberOneSavings))
                    return x(parseFloat(d.numberOneSavings));
                })
                .attr("cy", function(d) {
                    return y(parseFloat(d.unitSold));
                })
                .attr("opacity", 0.5)
                .style("fill", "#4292c6")
                .on('mouseover', function(d) {
                    tooltip.transition()
                        .duration(100)
                        .style('opacity', .9);
                    tooltip.html((d.generic_name) + "<br>" + "Manufacturer:" + (d.numOneManufacturer) + "<br>" + "Net Cost $" + (d.numberOneNetCost) + "<br>" + "Projected Savings $" + (d.numberOneSavings))
                        .style('left', `${d3.event.pageX + 2}px`)
                        .style('top', `${d3.event.pageY - 18}px`);
                })
                .on('mouseout', function(d) {
                    tooltip.transition()
                        .duration(400)
                        .style('opacity', 0);
                })
                .on('click', function(product) {
                    d3.select(this).style("fill", "blue")
                    clearBarChart()
                    buildBarChart(product)
                    builtdPieChart(currentNetCostByProduct)
                })

            // x axis
            svg.append("g")
                .attr("class", "x axis")
                .attr('id', "axis--x")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);
            svg.append("text")
                .style("text-anchor", "end")
                .attr("x", width)
                .attr("y", height - 8)
                .text("Savings");
            // y axis
            svg.append("g")
                .attr("class", "y axis")
                .attr('id', "axis--y")
                .call(yAxis);
            svg.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", "1em")
                .style("text-anchor", "end")
                .text("Units Sold");

            function brushended() {
                var s = d3.event.selection;
                if (!s) {
                    if (!idleTimeout) return idleTimeout = setTimeout(idled, idleDelay);
                    x.domain(d3.extent(data, function(d) {
                        return parseFloat(d.numberOneSavings);
                    })).nice();
                    y.domain(d3.extent(data, function(d) {
                        return parseFloat(d.unitSold);
                    })).nice();
                } else {
                    x.domain([s[0][0], s[1][0]].map(x.invert, x));
                    y.domain([s[1][1], s[0][1]].map(y.invert, y));
                    scatter.select(".brush").call(brush.move, null);
                }
                zoom();
            }

            function idled() {
                idleTimeout = null;
            }

            function zoom() {
                var t = scatter.transition().duration(750);
                svg.select("#axis--x").transition(t).call(xAxis);
                svg.select("#axis--y").transition(t).call(yAxis);
                scatter.selectAll("circle").transition(t)
                    .attr("cx", function(d) {
                        return x(parseFloat(d.numberOneSavings));
                    })
                    .attr("cy", function(d) {
                        return y(parseFloat(d.unitSold));
                    });
            }
        });


        function clearBarChart() {
            d3.select("#barChart").remove()
        }


        function padExtent(e, p) {
            if (p === undefined) p = 1;
            return ([e[0] - p, e[1] + p]);
        }

        function buildBarChart(product) {
            //console.log("d", d);
            d3.csv("csv/r_X_csv.csv", function(d) {
                var stackBarChartData = [];
                d.forEach(function(d) {
                    if (d.id == product.id) {
                        barChartHash = {};
                        barChartHash["manufacturer_code"] = d.manufacturer_code;
                        barChartHash["priority"] = d.priority;
                        barChartHash["net_cost"] = parseFloat(d.net_cost);
                        barChartHash["total_rebate"] = parseFloat(d.total_rebate);
                        stackBarChartData.push(barChartHash);
                    };
                })
                stackBarChartData.shift();
                console.log(stackBarChartData);
                var data = stackBarChartData;
                 var tooltip = d3.select('body').append('div')
               .attr('id', 'tooltip')
               .style('opacity', 0);
                var margin = {
                    top: 40,
                    right: 40,
                    bottom: 40,
                    left: 40
                };
                var width = 960 - margin.left - margin.right;
                var height = 500 - margin.top - margin.bottom;
                var svg = d3.select("body").append("svg")
                    .attr("id", "barChart")
                    .attr("width", width + margin.left + margin.bottom)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

                function round(value, decimals) {
                    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
                };
                // min/max
                var xExtent;
                var yExtent = d3.extent(data, function(d) {
                    //console.log("Net_C", d.net_cost);
                    //console.log("rebate", d.total_rebate);
                    //console.log(d.net_cost + d.total_rebate);
                    var nicer = d.net_cost + d.total_rebate;
                    //console.log("THIS", round(nicer, 2));
                    return round(nicer, 2)
                });
                //console.log("heigh", height)
                //console.log("y", yExtent)
                // domain
                var xScale = d3.scaleBand()
                    .domain(data.map(function(d) {
                        return d.priority;
                    }))
                    .range([0, width]);
                var yScale = d3.scaleLinear()
                    .domain([0, yExtent[1]])
                    .range([height, 0]);
                var x = d3.scaleBand()
                    .domain(data.map(function(d) {
                        return d.priority;
                    }))
                    .range([0, width]);
                var stack = d3.stack()
                    .keys(["net_cost", "total_rebate"])
                    .order(d3.stackOrderNone)
                    .offset(d3.stackOffsetNone);
                var series = stack(data);
                var groups = svg.selectAll("g")
                    .data(stack(data))
                    .enter()
                    .append("g");
                var rects = groups.selectAll("rect")
                    .data(function(d) {
                        return d
                    })
                    .enter()
                    .append("rect")
                    .attr("x", function(d) {
                        return xScale(d.data.priority)
                    })
                    .attr("y", function(d) {
                        // console.log(d)
                        if (d[0] != 0) {
                            return yScale(round(d[0], 2))
                        } else {
                            return yScale(round(d[1], 2)) - round(d[1], 2)
                        };
                    })
                    .attr("width", xScale.bandwidth())
                    .attr("height", function(d) {
                        if (d[0] != 0) {
                            return round(height - yScale(round(d[0], 2)), 2)
                        } else {
                            var total = d.data.net_cost + d.data.total_rebate;
                            return round(height - round(yScale(round(total, 2)), 2), 2);
                        };
                    })
                    .attr("id", function(d) {
                        return d.priority
                    })
                    .style("fill", function(d) {
                        if (d.data.priority == "CURRENT #1") {
                            return "orange"
                        } else {
                            return "blue"
                        }
                    })
                    .style("fill-opacity", "0.5")
                    .style("stroke", "black")
                    .style("stroke-width", "1px")
                    .on("mouseover", function(d) {
                        tooltip.transition()
                            .duration(200)
                            .style("opacity", .9)
                        tooltip.html("Manufacturer:" + (d.data.manufacturer_code) + "<br>" + "Net Cost $" + (d.data.net_cost) + "<br>" + "Total Rebate $" + (d.data.total_rebate) + "<br>" + "Bid Price $" + (round(d.data.net_cost + d.data.total_rebate, 2)))
                            // div.html("Product Details" + "<br>" + "Manufacturer:" + (d.numOneManufacturer) + "<br>" + "Generic Name:" + (d.generic_name) + "<br>" + "Priority:" + (d.numberOnePriority) + "<br>" + "Net Cost $" + (d.numberOneNetCost) + "<br>" + "Projected Savings $" + (d.numberOneSavings))
                            .style("left", (d3.event.pageX) + "px")
                            .style("top", (d3.event.pageY - 28) + "px");
                    })
                    .on('mouseout', function(d) {
                        tooltip.transition()
                            .duration(500)
                            .style("opacity", 0);
                    });
                // add the y Axis
                svg.append("g")
                    .call(d3.axisLeft(yScale));
                svg.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 0 - margin.left)
                    .attr("x", 0 - (height / 2))
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Bid Price ");
            })
        }

        function builtdPieChart(currentNetCostByProduct) {
            //console.log("this is what we what to look at ", currentNetCostByProduct);
            var svg = d3.select("#pieChart"),
                width = +svg.attr("width"),
                height = +svg.attr("height"),
                radius = Math.min(width, height) / 2,
                g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

            var pie = d3.pie()
                .sort(null)
                .value(function(d) {
                    return d.value;
                });

            var path = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            var label = d3.arc()
                .outerRadius(radius - 50)
                .innerRadius(radius - 50);

            d3.csv("csv/r_X_csv.csv", function(d) {
                var pieChartData = [];

                d.forEach(function(d) {
                    //console.log("this is d", d)
                    if (d.priority == 1) {
                        //console.log("this is the for each do", product.id);
                        // console.log("thid is d", d);
                        pieChartData.push(d)
                    }

                });
                //console.log("pieChartData", pieChartData);
                var priorityCount = {};
                pieChartData.forEach(function(d) {
                    if (d.manufacturer_code in priorityCount) {
                        //console.log("post-results", priorityCount[d.manufacturer_code] += 1)
                        priorityCount[d.manufacturer_code] += 1
                    } else {
                        //console.log("this is here", d)
                        priorityCount[d.manufacturer_code] = 1
                    };


                });
                //console.log("results", Object.keys(priorityCount))
                //console.log("other results", Object.values(priorityCount))
                //console.log("this is a hash", priorityCount);
                var pieChartArray = [];
                var pieKeys = Object.keys(priorityCount);
                var pieValues = Object.values(priorityCount);
                pieKeys.forEach(function(d, i) {
                    var pieChartHash = {};
                    //console.log(d)
                    //console.log(pieValues[i])
                    pieChartHash["manufacturer"] = d
                    pieChartHash["value"] = pieValues[i]
                    pieChartArray.push(pieChartHash)
                });
                console.log(pieChartArray)

                var arc = g.selectAll(".arc")
                    .data(pie(pieChartArray))
                    .enter().append("g")
                    .attr("class", "arc")


                arc.append("path")
                    .attr("d", path)
                    .attr("fill", function(d) {
                        //console.log("look at me", d)
                        return color(d.data.manufacturer);
                    });

                arc.append("text")
                    .attr("transform", function(d) {
                        return "translate(" + label.centroid(d) + ")";
                    })
                    .attr("dy", "0.35em")
                    .text(function(d) {
                        return d.data.manufacturer
                    }); //console.log("this is after each do", pieChartData);
            });


        };
    </script>

</body>

</html>

