<!doctype html>
<meta charset="utf-8">
<html>
<style>
    .bar {
        fill: darkgreen;
    }
    
    rect {
        fill: blue;
        fill-opacity: 0.5;
        stroke: black;
        stroke-width: 1px;
    }
    
    <%# .toolTip {
        position: absolute;
        display: none;
        min-width: 80px;
        height: auto;
        background: none repeat scroll 0 0 #ffffff;
        border: 1px solid #6F257F;
        padding: 14px;
        text-align: center;
    }
    
    %>div.tooltip {
        position: absolute;
        text-align: left;
        width: 175px;
        height: 120px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
    
    .arc text {
        font: 10px sans-serif;
        text-anchor: middle;
    }
    
    .arc path {
        stroke: #fff;
    }
</style>



<head>

    <h1> </h1>
</head>

<body>
    <svg id="scatter" width="700" height="500"> </svg>
    <svg id="pieChart" width="960" height="500"></svg>

    <div></div>
    <script src="http://d3js.org/d3.v4.min.js"></script>
    <script>
        var svg = d3.select("#scatter"),
            margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 50
            },
            width = +svg.attr("width"),
            height = +svg.attr("height"),
            domainwidth = width - margin.left - margin.right,
            domainheight = height - margin.top - margin.bottom;

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.top + "," + margin.top + ")");

        var div = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);



        d3.csv("csv/r_X_csv.csv", function(error, data) {
            // console.log("data", data)

            var unitSoldArray = [];
            var savingsArray = [];
            var productDetails = {};
            var currentNetCostByProduct = [];
            data.forEach(function(d) {

                if (d.generic_name != "") {
                    productDetails["id"] = (d.id);
                    productDetails["generic_name"] = (d.generic_name);
                    productDetails["unitSold"] = (d.rolling_yearly_usage);
                    unitSoldArray.push(parseFloat(d.rolling_yearly_usage));
                    // currentNetCostByProduct.push(productDetails);
                };
                if (d.priority == "CURRENT #1") {
                    productDetails["current_manufacturer"] = (d.manufacturer_code);
                    productDetails["currentNuberOneNetCost"] = (d.net_cost);
                    productDetails["currrentNumberOneSavings"] = (0);
                    productDetails["currentNumberOnePriority"] = (d.priority);

                };
                if (d.priority == 1) {
                    productDetails["numOneManufacturer"] = (d.manufacturer_code);
                    productDetails["numberOneNetCost"] = (d.net_cost);
                    productDetails["numberOneSavings"] = (d.saving);
                    productDetails["numberOnePriority"] = (d.priority);
                    currentNetCostByProduct.push(productDetails);
                    savingsArray.push(parseFloat(d.saving));
                    productDetails = {};
                };
            });
            console.log("currentNetCostByProduct", currentNetCostByProduct);

            var x = d3.scaleLinear()
                .domain(padExtent([-d3.max(savingsArray), d3.max(savingsArray)]))
                .range([0, domainwidth]);
            var y = d3.scaleLinear()
                .domain(padExtent([0, d3.max(unitSoldArray)]))
                .range([domainheight, 0]);



            g.selectAll("#numberOne")
                .data(currentNetCostByProduct)
                .enter().append("circle")
                .attr("id", "numberOne")
                .attr("class", "dot")
                .attr("r", 7)
                .attr("cx", function(d) {
                    return x(d.numberOneSavings);
                })
                .attr("cy", function(d) {
                    return y(d.unitSold);
                })
                .style("fill", function(d) {
                    if (d.current_manufacturer == d.numOneManufacturer) {
                        return "red"
                    } else {
                        return "green"
                    } //Bottom Right 
                })
                .on('click', function(product) {
                    d3.selectAll("#numberOne").style("fill", function(d) {
                        if (d.current_manufacturer == d.numOneManufacturer) {
                            return "red"
                        } else {
                            return "green"
                        }
                    })
                    d3.select(this).style("fill", "blue")
                    clearBarChart()
                    buildBarChart(product)
                    builtdPieChart(currentNetCostByProduct)
                })
                .on("mouseover", function(d) {
                    div.transition()
                        .duration(200)
                        .style("opacity", .9)
                    div.html((d.generic_name) + "<br>" + "Manufacturer:" + (d.numOneManufacturer) + "<br>" + "Net Cost $" + (d.numberOneNetCost) + "<br>" + "Projected Savings $" + (d.numberOneSavings))
                        // div.html("Product Details" + "<br>" + "Manufacturer:" + (d.numOneManufacturer) + "<br>" + "Generic Name:" + (d.generic_name) + "<br>" + "Priority:" + (d.numberOnePriority) + "<br>" + "Net Cost $" + (d.numberOneNetCost) + "<br>" + "Projected Savings $" + (d.numberOneSavings))
                        .style("left", (d3.event.pageX) + "px")
                        .style("top", (d3.event.pageY - 28) + "px");
                })
                .on("mouseout", function(d) {
                    div.transition()
                        .duration(500)
                        .style("opacity", 0);
                });


            g.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + y.range()[0] / 1 + ")")
                .call(d3.axisBottom(x).ticks(5));

            g.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + x.range()[0] / 2 + ", 0)")
                .call(d3.axisRight(y).ticks(5));

        });

        function clearBarChart() {
            d3.select("#barChart").remove()
        }


        function padExtent(e, p) {
            if (p === undefined) p = 1;
            return ([e[0] - p, e[1] + p]);
        }

        function buildBarChart(product) {
            //console.log("d", d);
            d3.csv("csv/r_X_csv.csv", function(d) {
                var stackBarChartData = [];
                d.forEach(function(d) {
                    if (d.id == product.id) {
                        barChartHash = {};
                        barChartHash["priority"] = d.priority;
                        barChartHash["net_cost"] = parseFloat(d.net_cost);
                        barChartHash["total_rebate"] = parseFloat(d.total_rebate);
                        stackBarChartData.push(barChartHash);
                    };
                })
                stackBarChartData.shift();
                console.log(stackBarChartData);

                var data = stackBarChartData;
                var margin = {
                    top: 10,
                    right: 40,
                    bottom: 40,
                    left: 40
                };
                var width = 960 - margin.left - margin.right;
                var height = 500 - margin.top - margin.bottom;
                var svg = d3.select("body").append("svg")
                    .attr("id", "barChart")
                    .attr("width", width + margin.left + margin.bottom)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

                // min/max
                var xExtent;
                var yExtent = d3.extent(data, function(d) {
                    return d.net_cost + d.total_rebate
                });

                // domain
                var xScale = d3.scaleBand()
                    .domain(data.map(function(d) {
                        return d.priority;
                    }))
                    .range([0, width]);
                var yScale = d3.scaleLinear()
                    .domain([0, yExtent[1]])
                    .range([height, 1]);

                var stack = d3.stack()
                    .keys(["net_cost", "total_rebate"])
                    .order(d3.stackOrderNone)
                    .offset(d3.stackOffsetNone);

                var series = stack(data);

                var groups = svg.selectAll("g")
                    .data(stack(data))
                    .enter()
                    .append("g");
                    svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale));

                    svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale));
                    

                var rects = groups.selectAll("rect")
                    .data(function(d) {
                        return d
                    })
                    .enter()
                    .append("rect")
                    .attr("x", function(d) {
                        return xScale(d.data.priority)
                    })
                    .attr("y", function(d) {
                        return yScale(d[1])
                    })
                    //.style("class", ".rect1")
                    .attr("width", xScale.bandwidth())
                    .attr("height", function(d) {
                        return height + yScale(d[0])
                    })
                    .attr("id", function(d) {
                        return d.priority
                    });

                // add the x Axis
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale));
                // add the y Axis
                svg.append("g")
                    .call(d3.axisLeft(yScale));
                svg.append("text")
                    .attr("transform",
                        "translate(" + (width / 2) + " ," +
                        (height + margin.top + 20) + ")")
                    .style("text-anchor", "middle")
                    .text("Priority");
                svg.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 0 - margin.left)
                    .attr("x", 0 - (height / 2))
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Bid Price ");

            })
        }

        function builtdPieChart(currentNetCostByProduct) {
            //console.log("this is what we what to look at ", currentNetCostByProduct);
            var svg = d3.select("#pieChart"),
                width = +svg.attr("width"),
                height = +svg.attr("height"),
                radius = Math.min(width, height) / 2,
                g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

            var pie = d3.pie()
                .sort(null)
                .value(function(d) {
                    return d.value;
                });

            var path = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            var label = d3.arc()
                .outerRadius(radius - 50)
                .innerRadius(radius - 50);

            d3.csv("csv/r_X_csv.csv", function(d) {
                var pieChartData = [];

                d.forEach(function(d) {
                    //console.log("this is d", d)
                    if (d.priority == 1) {
                        //console.log("this is the for each do", product.id);
                        // console.log("thid is d", d);
                        pieChartData.push(d)
                    }

                });
                //console.log("pieChartData", pieChartData);
                var priorityCount = {};
                pieChartData.forEach(function(d) {
                    if (d.manufacturer_code in priorityCount) {
                        //console.log("post-results", priorityCount[d.manufacturer_code] += 1)
                        priorityCount[d.manufacturer_code] += 1
                    } else {
                        //console.log("this is here", d)
                        priorityCount[d.manufacturer_code] = 1
                    };


                });
                //console.log("results", Object.keys(priorityCount))
                //console.log("other results", Object.values(priorityCount))
                //console.log("this is a hash", priorityCount);
                var pieChartArray = [];
                var pieKeys = Object.keys(priorityCount);
                var pieValues = Object.values(priorityCount);
                pieKeys.forEach(function(d, i) {
                    var pieChartHash = {};
                    //console.log(d)
                    //console.log(pieValues[i])
                    pieChartHash["manufacturer"] = d
                    pieChartHash["value"] = pieValues[i]
                    pieChartArray.push(pieChartHash)
                });
                console.log(pieChartArray)

                var arc = g.selectAll(".arc")
                    .data(pie(pieChartArray))
                    .enter().append("g")
                    .attr("class", "arc");

                arc.append("path")
                    .attr("d", path)
                    .attr("fill", function(d) {
                        //console.log("look at me", d)
                        return color(d.data.manufacturer);
                    });

                arc.append("text")
                    .attr("transform", function(d) {
                        return "translate(" + label.centroid(d) + ")";
                    })
                    .attr("dy", "0.35em")
                    .text(function(d) {
                        return d.data.manufacturer
                    }); //console.log("this is after each do", pieChartData);
            });


        };
    </script>

</body>

</html>