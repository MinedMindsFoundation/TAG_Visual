<!doctype html>
<meta charset="utf-8">
<html>
<style>
    .bar {
        fill: steelblue;
    }
    
    <%# .toolTip {
        position: absolute;
        display: none;
        min-width: 80px;
        height: auto;
        background: none repeat scroll 0 0 #ffffff;
        border: 1px solid #6F257F;
        padding: 14px;
        text-align: center;
    }
    
    %>div.tooltip {
        position: absolute;
        text-align: center;
        width: 175px;
        height: 100px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
    
    .arc text {
        font: 10px sans-serif;
        text-anchor: middle;
    }
    
    .arc path {
        stroke: #fff;
    }
</style>



<head>

    <h1> </h1>
</head>

<body>
    <svg id="scatter" width="700" height="500"> </svg>
 <svg id = "pieChart" width="960" height="500"></svg>
    <div></div>
    <script src="http://d3js.org/d3.v4.min.js"></script>
    <script>
        //set the dimensions and margins of the graph
        <%# var margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 320,
            },
            width = 1200- margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;
        // set the ranges
        var y = d3.scaleBand()
            .range([height, 0])
            .padding(0.1);
        var x = d3.scaleLinear()
            .range([0, width]);
        // append the svg object to the body of the page
        // append a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");
        
        var tooltip = d3.select("body").append("div").attr("class", "toolTip");
        d3.csv("csv/r_X_csv.csv", function(error, data) {
            // console.log("data", data)
        
        var bidArr = [];
        var productDetails = {}
        var currentNetCostByProduct = [];
            data.forEach(function(d) {
                
                if (d.generic_name != "") {
                    productDetails["id"] = (d.id);
                    productDetails["generic_name"] = (d.generic_name);
                   // currentNetCostByProduct.push(productDetails);
                };
                if (d.priority == "CURRENT #1") {
                    productDetails["current_manufacturer"] = (d.manufacturer_code);
                    productDetails["netCost"] = (d.net_cost);
                    currentNetCostByProduct.push(productDetails);
                    bidArr.push(parseFloat(d.net_cost));
                    productDetails = {};
                };
            });
           console.log("currentNetCostByProduct", currentNetCostByProduct);
        
// Scale the range of the data in the domains
        x.domain([0, d3.max(bidArr)
        ])
        y.domain(currentNetCostByProduct.map(function(d) {
            console.log("id", d.id);
            return d.id;
        }));
        //y.domain([0, d3.max(data, function(d) { return d.sales; })]);
        // append the rectangles for the bar chart
        svg.selectAll(".bar")
            .data(currentNetCostByProduct)
            .enter().append("rect")
            .attr("class", "bar")
            //.attr("x", function(d) { return x(d.sales); })
            .attr("width", function(d) {
                //console.log("d", d.bid)
                return x(d.netCost);
            })
            .attr("y", function(d) {
                //console.log("d", d.medicine)
                return y(d.id);
            })
            .attr("height", y.bandwidth())
            .on("mouseover", function(d){
            tooltip
              .style("left", d3.event.pageX - 50 + "px")
              .style("top", d3.event.pageY - 70 + "px")
              .style("display", "inline-block")
              .html( "Manufacturer Info" + "<br>" + (d.current_manufacturer) + "<br>" + (d.generic_name) + "<br>" + (d.netCost));
        })
    		.on("mouseout", function(d){ tooltip.style("display", "none");});
        // add the x Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));
        // add the y Axis
        svg.append("g")
            .call(d3.axisLeft(y));
 });             %>

        var svg = d3.select("#scatter"),
            margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 50
            },
            width = +svg.attr("width"),
            height = +svg.attr("height"),
            domainwidth = width - margin.left - margin.right,
            domainheight = height - margin.top - margin.bottom;

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.top + "," + margin.top + ")");

        var div = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        g.append("rect")
            .attr("width", width - margin.left - margin.right)
            .attr("height", height - margin.top - margin.bottom)
            .attr("fill", "#F6F6F6");

        d3.csv("csv/r_X_csv.csv", function(error, data) {
            // console.log("data", data)

            var unitSoldArray = [];
            var savingsArray = [];
            var productDetails = {};
            var currentNetCostByProduct = [];
            data.forEach(function(d) {

                if (d.generic_name != "") {
                    productDetails["id"] = (d.id);
                    productDetails["generic_name"] = (d.generic_name);
                    productDetails["unitSold"] = (d.rolling_yearly_usage);
                    unitSoldArray.push(parseFloat(d.rolling_yearly_usage));
                    // currentNetCostByProduct.push(productDetails);
                };
                if (d.priority == "CURRENT #1") {
                    productDetails["current_manufacturer"] = (d.manufacturer_code);
                    productDetails["currentNuberOneNetCost"] = (d.net_cost);
                    productDetails["currrentNumberOneSavings"] = (0);
                    productDetails["currentNumberOnePriority"] = (d.priority);

                };
                if (d.priority == 1) {
                    productDetails["numOneManufacturer"] = (d.manufacturer_code);
                    productDetails["numberOneNetCost"] = (d.net_cost);
                    productDetails["numberOneSavings"] = (d.saving);
                    productDetails["numberOnePriority"] = (d.priority);
                    currentNetCostByProduct.push(productDetails);
                    savingsArray.push(parseFloat(d.saving));
                    productDetails = {};
                };
            });
            console.log("currentNetCostByProduct", currentNetCostByProduct);

            var x = d3.scaleLinear()
                .domain(padExtent([-d3.max(savingsArray), d3.max(savingsArray)]))
                .range(padExtent([0, domainwidth]));
            var y = d3.scaleLinear()
                .domain(padExtent([0, d3.max(unitSoldArray)]))
                .range(padExtent([domainheight, 0]));



            g.selectAll("#numberOne")
                .data(currentNetCostByProduct)
                .enter().append("circle")
                .attr("id", "numberOne")
                .attr("class", "dot")
                .attr("r", 7)
                .attr("cx", function(d) {
                    return x(d.numberOneSavings);
                })
                .attr("cy", function(d) {
                    return y(d.unitSold);
                })
                .style("fill", function(d) {
                    if (d.current_manufacturer == d.numOneManufacturer) {
                        return "red"
                    } else {
                        return "green"
                    } //Bottom Right 
                })
                .on('click', function(product) {
                    d3.select(this).style("fill", "blue")
                    clearBarChart()
                    buildBarChart(product)
                    builtdPieChart(currentNetCostByProduct)
                        //console.log("d", d);
                })
                .on("mouseover", function(d) {
                    div.transition()
                        .duration(200)
                        .style("opacity", .9)
                    div.html("Product Details" + "<br>" + "Manufacturer:" + (d.numOneManufacturer) + "<br>" + "Generic Name:" + (d.generic_name) + "<br>" + "Priority:" + (d.numberOnePriority) + "<br>" + "Net Cost $" + (d.numberOneNetCost) + "<br>" + "Projected Savings $" + (d.numberOneSavings))
                        .style("left", (d3.event.pageX) + "px")
                        .style("top", (d3.event.pageY - 28) + "px");
                })
                .on("mouseout", function(d) {
                    div.transition()
                        .duration(500)
                        .style("opacity", 0);
                });


            g.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(1," + y.range()[0] / 1 + ")")
                .call(d3.axisBottom(x).ticks(5));

            g.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + x.range()[1] / 2 + ", 0)")
                .call(d3.axisLeft(y).ticks(5));

        });

        function clearBarChart() {
            d3.select("#barChart").remove()
        }


        function padExtent(e, p) {
            if (p === undefined) p = 1;
            return ([e[0] - p, e[1] + p]);
        }

        function buildBarChart(product) {
            //console.log("d", d);
            var margin = {
                    top: 30,
                    right: 20,
                    bottom: 55,
                    left: 40
                },
                width = 960 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

            // set the ranges
            var x = d3.scaleBand()
                .range([0, width])
                .padding(0.1);
            var y = d3.scaleLinear()
                .range([height, 0]);

            var svg = d3.select("body").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .attr("id", "barChart")
                .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");


            d3.csv("csv/r_X_csv.csv", function(d) {
                var barChartData = [];
                var barNetCost = [];
                d.forEach(function(d) {
                    if (d.id == product.id) {
                        //console.log("this is the for each do", product.id);
                        //console.log("thid id d", d);
                        barNetCost.push(parseFloat(d.net_cost));
                        barChartData.push(d)
                    };

                })
                barNetCost.shift()
                var barProductDetails = barChartData.shift();
                // console.log("this is bar data array", barChartData);
                // console.log("tis is bar data after shift", barProductDetails)

                x.domain(barChartData.map(function(d) {
                    return d.priority;
                }));
                y.domain([0, d3.max(barNetCost)]);

                // append the rectangles for the bar chart
                svg.selectAll(".bar")
                    .data(barChartData)
                    .enter().append("rect")
                    .attr("class", "bar")
                    .attr("x", function(d) {
                        return x(d.priority);
                    })
                    .attr("width", x.bandwidth())
                    .attr("y", function(d) {
                        return y(d.net_cost);
                    })
                    .attr("height", function(d) {
                        return height - y(d.net_cost);
                    })
                    .on("mouseover", function(d) {
                        div.transition()
                            .duration(200)
                            .style("opacity", .9)
                        div.html("Product Details" + "<br>" + "Manufacturer:" + (d.manufacturer_code) + "<br>" + "Generic Name:" + (barProductDetails.generic_name) + "<br>" + "Priority:" + (d.priority) + "<br>" + "Net Cost $" + (d.net_cost) + "<br>" + "Projected Savings $" + (d.saving))
                            .style("left", (d3.event.pageX) + "px")
                            .style("top", (d3.event.pageY - 28) + "px");
                    })
                    .on("mouseout", function(d) {
                        div.transition()
                            .duration(500)
                            .style("opacity", 0)
                    });

                // add the x Axis
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));

                // add the y Axis
                svg.append("g")
                    .call(d3.axisLeft(y));

                svg.append("text")
                    .attr("transform",
                        "translate(" + (width / 2) + " ," +
                        (height + margin.top + 20) + ")")
                    .style("text-anchor", "middle")
                    .text("Priority");
                svg.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 0 - margin.left)
                    .attr("x", 0 - (height / 2))
                    .attr("dy", "1em")
                    .style("text-anchor", "middle")
                    .text("Net Cost");

                svg.append("text")
                    .attr("x", (width / 2))
                    .attr("y", 0 - (margin.top / 2))
                    .attr("text-anchor", "middle")
                    .style("font-size", "16px")
                    .style("text-decoration", "underline")
                    .text(barProductDetails.generic_name);
            });
        }

        function builtdPieChart(currentNetCostByProduct) {
            //console.log("this is what we what to look at ", currentNetCostByProduct);
            var svg = d3.select("#pieChart"),
                    width = +svg.attr("width"),
                    height = +svg.attr("height"),
                    radius = Math.min(width, height) / 2,
                    g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

            var pie = d3.pie()
                .sort(null)
                .value(function(d) { return d.value; });

            var path = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            var label = d3.arc()
                .outerRadius(radius - 50)
                .innerRadius(radius - 50);

            d3.csv("csv/r_X_csv.csv", function(d) {
                var pieChartData = [];

                d.forEach(function(d) {
                    //console.log("this is d", d)
                    if (d.priority == 1) {
                        //console.log("this is the for each do", product.id);
                        // console.log("thid is d", d);
                        pieChartData.push(d)
                    }

                });
                //console.log("pieChartData", pieChartData);
                var priorityCount = {};
                pieChartData.forEach(function(d) {
                    if (d.manufacturer_code in priorityCount) {
                        //console.log("post-results", priorityCount[d.manufacturer_code] += 1)
                        priorityCount[d.manufacturer_code] += 1
                    } else {
                        //console.log("this is here", d)
                        priorityCount[d.manufacturer_code] = 1
                    };


                });
                //console.log("results", Object.keys(priorityCount))
                //console.log("other results", Object.values(priorityCount))
                //console.log("this is a hash", priorityCount);
                var pieChartArray = [];
                var pieKeys = Object.keys(priorityCount);
                var pieValues = Object.values(priorityCount);
                pieKeys.forEach(function(d, i) {
                    var pieChartHash = {};
                    //console.log(d)
                    //console.log(pieValues[i])
                    pieChartHash["manufacturer"] = d
                    pieChartHash["value"] = pieValues[i]
                    pieChartArray.push(pieChartHash)
                });
                console.log(pieChartArray)

                var arc = g.selectAll(".arc")
                            .data(pie(pieChartArray))
                            .enter().append("g")
                            .attr("class", "arc");

                    arc.append("path")
                            .attr("d", path)
                            .attr("fill", function(d) { return color(d.value); });

                    arc.append("text")
                            .attr("transform", function(d) { return "translate(" + label.centroid(d) + ")"; })
                            .attr("dy", "0.35em")
                            .text(d.manufacturer); //console.log("this is after each do", pieChartData);
            });


        }
    </script>

</body>

</html>